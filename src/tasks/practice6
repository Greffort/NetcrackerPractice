Практическая работа №6

Задание на практическую работу

В процессе написания тестовых заданий ознакомьтесь с механизмами наследования классов, переопределения методов,
паттернами проектирования «Компаратор», «Итератор» и «Абстрактная фабрика».
Задание 1
Если этого не было сделано ранее, создайте в пакете buildings внутренние пакеты buildings.dwelling, buildings.office и рассортируйте
по пакетам имеющиеся классы.
Задание 2
Создайте пакет buildings.dwelling.hotel.
Создайте класс HotelFloor, расширяющий класс DwellingFloor.
Каждый этаж отеля имеет показатель «количество звезд».
Разные этажи отеля могут иметь разные значения показателя количества звезд.
Этаж отеля можно создать как по количеству помещений этажа, так и по массиву помещений. Количество звезд этажа при создании объекта должно
браться из константы в классе, равной 1.
У объекта этажа отеля должны быть методы получения и изменения его количества звезд.
Создайте класс отеля Hotel, расширяющий класс Dwelling.
Класс отеля должен позволять узнать показатель «количество звезд» всего отеля, который равен максимальному показателю «количество звезд» среди
всех этажей отеля (если этаж в здании отеля не является этажом отеля, то он при подсчётах игнорируется).
Переопределите метод getBestSpace() у класса отеля. Лучшим считается номер с максимальным значением показателя area*stars, где area-площадь
помещения, stars-определяется следующим образом.

количество звезд	stars
*	0,25
**	0,5
***	1
****	1,25
*****	1,5

Переопределите в классе HotelFloor метод String toString(). Метод выводит тип этажа, значение показателя звездности этажа,
 текущее количество помещений этажа и соответствующую информацию по каждому помещению. Например,
HotelFloor (5, 4, Flat (3, 55.0), Flat (2, 48.0), Flat (1, 37.0), Flat (2, 48.0))
Переопределите в классе HotelBuilding метод String toString(). Метод выводит значение показателя звездности здания, текущее
количество этажей и соответствующую информацию о каждом помещении каждого этажа, используя toString() уровня этажа и помещения.
Например, HotelBuilding (5, 4, HotelFloor(3, 4, Flat(...),...), HotelFloor(4, 4, Flat(...),...), HotelFloor(4, 4, Flat(...),...), HotelFloor(5, 4, Flat(...),...)).

Добавьте в класс HotelFloor реализацию метода boolean equals(Object object). Метод должен возвращать true только в том случае, если объект,
на который передана ссылка, является этажом отеля, количество помещений совпадает, сами помещения эквивалентны помещениям текущего объекта,
а количество звезд совпадает.

Добавьте в класс HotelBuilding реализацию метода boolean equals(Object object). Метод должен возвращать true только в том случае, если объект,
на который передана ссылка, является отелем, количество этажей совпадает и сами этажи эквивалентны помещениям текущего отеля.

Добавьте в класс HotelFloor реализацию метода int hashCode(). Значение хеш-функции этажа отеля вычисляется как значение побитового исключающег
о ИЛИ количества помещений на этаже, показателя звездности этажа и значений хеш-функций помещений этажа.

Добавьте в класс HotelBuilding реализацию метода int hashCode(). Значение хеш-функции здания вычисляется как значение побитового исключающего
 ИЛИ количества этажей здания и значений хеш-функций этажей отеля.

Задание 3
Измените интерфейсы Floor так, чтобы он был итерируем (в нем был метод java.util.Iterator iterator(), возвращающий итератор по помещениям этажа).
Создайте этот метод в классах, реализующих данный интерфейс. Для этого следует описать дополнительные классы/класс итераторов с соответствующими
методами, удаление элемента реализовывать не нужно.

Измените интерфейс Building так, чтобы он был итерируем (в нем был метод java.util.Iterator iterator(), возвращающий итератор по этажам здания).
 Создайте этот метод в классах, реализующих данный интерфейс. Для этого следует описать дополнительные классы/класс итераторов с соответствующими
 методами, удаление элемента реализовывать не нужно.
Следует оптимизировать работу итераторов с учетом знания о внутренней структуре класса. Проверьте работу итераторов.

Если вы этого не сделали раньше, то исправьте код интерфейсов Floor и Building (а также реализующие их классы) так, чтобы помещения на этаже и этажи в здании могли использоваться в цикле for в стиле for-each.

Задание 4
Добавьте для интерфейсов Space и Floor интерфейс Comparable<> в качестве предка. В классах помещений реализуйте метод int compareTo(T o) таким образом, чтобы он сравнивал объекты помещений по их площади и считал бОльшим помещение с большей площадью. В классах этажей реализуйте метод int compareTo(T o) таким образом, чтобы он сравнивал объекты этажей по количеству помещений и считал бОльшим этаж с бОльшим количеством помещений. Добавьте в класс Buildings метод сортировки помещений этажа по возрастанию площадей помещений, и метод сортировки этажей здания по возрастанию количества помещений на этаже. Объедините оба метода в один параметризованный метод сортировки.
Опишите класс критерия, реализующий интерфейс java.util.Comparator таким образом, чтобы он сравнивал помещения по количеству комнат и считал бОльшим помещение с меньшим количеством комнат. Опишите класс критерия, реализующий интерфейс java.util.Comparator таким образом, чтобы он сравнивал этажи по общей площади помещений на этаже и считал бОльшим этаж с меньшей общей площадью помещений на этаже.
В класс Buildings добавьте два метода сортировки с критерием – сортировка помещений на этаже по убыванию количества комнат и сортировка этажей в здании по убыванию общей площади помещений этажа. Объедините оба метода в один параметризованный метод сортировки с критерием.

Задание 5
Создайте интерфейс BuildingFactory, содержащий методы:
•	public Space createSpace(double area)
•	public Space createSpace(int roomsCount, double area)
•	public Floor createFloor(int spacesCount)
•	public Floor createFloor(Space[] spaces)
•	public Building createBuilding(int floorsCount, int[] spacesCounts)
•	public Building createBuilding(Floor[] floors)

Задание 6
Создайте классы конкретных фабрик DwellingFactory, OfficeFactory, HotelFactory, реализующие интерфейс BuildingFactory и создающие объекты соответствующих типов.

Задание 7
В классе Buildings создайте статическое поле типа BuildingFactory и метод setBuildingFactory, позволяющие, соответственно, хранить ссылку и устанавливать ссылку на текущую конкретную фабрику.
По умолчанию поле должно ссылаться на объект, порождающий экземпляры класса Dwelling и связанных с ним классов.

Задание 8
В классе Buildings реализуйте статические методы, которые с помощью текущей фабрики создают новые экземпляры соответствующих объектов. В остальных методах класса Buildings замените прямое создание экземпляров объектов на вызов методов фабрики.
